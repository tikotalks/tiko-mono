name: Deploy Websites to Cloudflare Pages

on:
  push:
    branches:
      - master
      - develop
  workflow_dispatch:
    inputs:
      target:
        description: 'Target website to deploy (marketing, media, or all)'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - marketing
          - media
      message:
        description: 'Deployment message'
        required: false
        default: 'Manual deployment from admin dashboard'

jobs:
  determine-environment:
    uses: ./.github/workflows/reusable-determine-environment.yml

  check-triggers:
    runs-on: ubuntu-latest
    outputs:
      should-build: ${{ steps.check.outputs.should-build }}
      build-marketing: ${{ steps.check.outputs.build-marketing }}
      build-media: ${{ steps.check.outputs.build-media }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2
          
      - name: Check triggers
        id: check
        run: |
          # Default to no builds
          echo "should-build=false" >> $GITHUB_OUTPUT
          echo "build-marketing=false" >> $GITHUB_OUTPUT
          echo "build-media=false" >> $GITHUB_OUTPUT
          
          # Handle workflow_dispatch trigger
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            TARGET="${{ github.event.inputs.target }}"
            echo "Workflow dispatch target: $TARGET"
            
            if [[ "$TARGET" == "all" ]]; then
              echo "should-build=true" >> $GITHUB_OUTPUT
              echo "build-marketing=true" >> $GITHUB_OUTPUT
              echo "build-media=true" >> $GITHUB_OUTPUT
            elif [[ "$TARGET" == "marketing" ]]; then
              echo "should-build=true" >> $GITHUB_OUTPUT
              echo "build-marketing=true" >> $GITHUB_OUTPUT
            elif [[ "$TARGET" == "media" ]]; then
              echo "should-build=true" >> $GITHUB_OUTPUT
              echo "build-media=true" >> $GITHUB_OUTPUT
            fi
            exit 0
          fi
          
          # For develop branch, check changed files instead of commit message
          if [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
            echo "Develop branch detected - checking changed files..."
            
            # Get list of changed files
            CHANGED_FILES=$(git diff --name-only HEAD^ HEAD || git diff --name-only HEAD)
            echo "Changed files:"
            echo "$CHANGED_FILES"
            
            # Check if UI or Core packages changed (deploy all websites)
            if echo "$CHANGED_FILES" | grep -E "^packages/(ui|core)/" > /dev/null; then
              echo "UI or Core package changed - deploying all websites"
              echo "should-build=true" >> $GITHUB_OUTPUT
              echo "build-marketing=true" >> $GITHUB_OUTPUT
              echo "build-media=true" >> $GITHUB_OUTPUT
              exit 0
            fi
            
            # Check individual websites
            if echo "$CHANGED_FILES" | grep -E "^websites/marketing/" > /dev/null; then
              echo "build-marketing=true" >> $GITHUB_OUTPUT
              echo "should-build=true" >> $GITHUB_OUTPUT
            fi
            if echo "$CHANGED_FILES" | grep -E "^websites/media/" > /dev/null; then
              echo "build-media=true" >> $GITHUB_OUTPUT
              echo "should-build=true" >> $GITHUB_OUTPUT
            fi
            
            exit 0
          fi

          # For master branch, handle push trigger - check commit message
          COMMIT_MSG='${{ github.event.head_commit.message }}'
          echo "Commit message: $COMMIT_MSG"
          
          # Check for build all triggers
          if [[ "$COMMIT_MSG" == *"[build:all]"* ]] || [[ "$COMMIT_MSG" == *"[build:websites]"* ]]; then
            echo "should-build=true" >> $GITHUB_OUTPUT
            echo "build-marketing=true" >> $GITHUB_OUTPUT
            echo "build-media=true" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Check for specific website triggers
          if [[ "$COMMIT_MSG" == *"[build:marketing]"* ]]; then
            echo "build-marketing=true" >> $GITHUB_OUTPUT
            echo "should-build=true" >> $GITHUB_OUTPUT
          fi
          
          if [[ "$COMMIT_MSG" == *"[build:media]"* ]]; then
            echo "build-media=true" >> $GITHUB_OUTPUT
            echo "should-build=true" >> $GITHUB_OUTPUT
          fi

  check-environment:
    needs: check-triggers
    if: needs.check-triggers.outputs.should-build == 'true'
    uses: ./.github/workflows/reusable-check-environment.yml
    secrets: inherit

  deploy-marketing:
    needs: [determine-environment, check-triggers, check-environment]
    if: needs.check-triggers.outputs.build-marketing == 'true'
    runs-on: ubuntu-latest
    name: Deploy Marketing Website (${{ needs.determine-environment.outputs.environment }})
    steps:
      - uses: actions/checkout@v4
      
      - uses: pnpm/action-setup@v2
        with:
          version: 8
          
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'
          
      - name: Install dependencies
        run: pnpm install --no-frozen-lockfile
        
      - name: Install Wrangler
        run: pnpm add -w wrangler@3.90.0 --save-dev
        
      - name: Generate i18n translations
        run: pnpm generate:i18n:worker:prod
        env:
          VITE_SUPABASE_URL: ${{ secrets.VITE_SUPABASE_URL }}
          VITE_SUPABASE_ANON_KEY: ${{ secrets.VITE_SUPABASE_ANON_KEY }}
          VITE_SUPABASE_PUBLISHABLE_KEY: ${{ secrets.VITE_SUPABASE_PUBLISHABLE_KEY }}
        
      - name: Build Marketing website
        run: |
          pnpm --filter=@tiko/ui build
          pnpm --filter=@tiko/core build
          pnpm --filter=marketing exec vite build
        env:
          VITE_SUPABASE_URL: ${{ secrets.VITE_SUPABASE_URL }}
          VITE_SUPABASE_ANON_KEY: ${{ secrets.VITE_SUPABASE_ANON_KEY }}
          VITE_SUPABASE_PUBLISHABLE_KEY: ${{ secrets.VITE_SUPABASE_PUBLISHABLE_KEY }}
          VITE_USE_CONTENT_WORKER: "true"
          VITE_CONTENT_API_URL: "https://content.tikoapi.org"
          VITE_DEPLOYED_VERSION_ID: "v1.0.1"
          
      - name: Deploy to Cloudflare Pages
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: dc2b7d14a69351375cab6de9a13ddee9
          command: pages deploy ./websites/marketing/dist --project-name=tiko-marketing${{ needs.determine-environment.outputs.branch-suffix }} --commit-dirty=true --branch=${{ github.ref_name }}

  deploy-media:
    needs: [determine-environment, check-triggers, check-environment]
    if: needs.check-triggers.outputs.build-media == 'true'
    runs-on: ubuntu-latest
    name: Deploy Media Website (${{ needs.determine-environment.outputs.environment }})
    steps:
      - uses: actions/checkout@v4
      
      - uses: pnpm/action-setup@v2
        with:
          version: 8
          
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'
          
      - name: Install dependencies
        run: pnpm install --no-frozen-lockfile
        
      - name: Install Wrangler
        run: pnpm add -w wrangler@3.90.0 --save-dev
        
      - name: Generate i18n translations
        run: pnpm generate:i18n:worker:prod
        env:
          VITE_SUPABASE_URL: ${{ secrets.VITE_SUPABASE_URL }}
          VITE_SUPABASE_ANON_KEY: ${{ secrets.VITE_SUPABASE_ANON_KEY }}
          VITE_SUPABASE_PUBLISHABLE_KEY: ${{ secrets.VITE_SUPABASE_PUBLISHABLE_KEY }}
        
      - name: Build Media website
        run: |
          pnpm --filter=@tiko/ui build
          pnpm --filter=@tiko/core build
          pnpm --filter=media exec vite build
        env:
          VITE_SUPABASE_URL: ${{ secrets.VITE_SUPABASE_URL }}
          VITE_SUPABASE_ANON_KEY: ${{ secrets.VITE_SUPABASE_ANON_KEY }}
          VITE_SUPABASE_PUBLISHABLE_KEY: ${{ secrets.VITE_SUPABASE_PUBLISHABLE_KEY }}
          VITE_USE_CONTENT_WORKER: "true"
          VITE_CONTENT_API_URL: "https://content.tikoapi.org"
          VITE_DEPLOYED_VERSION_ID: "v1.0.1"
          
      - name: Create Cloudflare Pages project if needed
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        run: |
          # Check if project exists
          PROJECT_EXISTS=$(curl -s -X GET \
            "https://api.cloudflare.com/client/v4/accounts/dc2b7d14a69351375cab6de9a13ddee9/pages/projects/tiko-media${{ needs.determine-environment.outputs.branch-suffix }}" \
            -H "Authorization: Bearer $CLOUDFLARE_API_TOKEN" \
            -H "Content-Type: application/json" | jq -r '.success')
          
          if [ "$PROJECT_EXISTS" != "true" ]; then
            echo "Creating Cloudflare Pages project tiko-media${{ needs.determine-environment.outputs.branch-suffix }}..."
            curl -X POST \
              "https://api.cloudflare.com/client/v4/accounts/dc2b7d14a69351375cab6de9a13ddee9/pages/projects" \
              -H "Authorization: Bearer $CLOUDFLARE_API_TOKEN" \
              -H "Content-Type: application/json" \
              --data '{
                "name": "tiko-media${{ needs.determine-environment.outputs.branch-suffix }}",
                "production_branch": "${{ github.ref_name }}"
              }'
          else
            echo "Project tiko-media${{ needs.determine-environment.outputs.branch-suffix }} already exists"
          fi
      
      - name: Deploy to Cloudflare Pages
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: dc2b7d14a69351375cab6de9a13ddee9
          command: pages deploy ./websites/media/dist --project-name=tiko-media${{ needs.determine-environment.outputs.branch-suffix }} --commit-dirty=true --branch=${{ github.ref_name }}