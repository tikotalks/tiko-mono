name: Deploy Cloudflare Workers

on:
  push:
    branches:
      - master
  workflow_dispatch:
    inputs:
      target:
        description: 'Target worker to deploy (i18n-translator, media-upload, sentence-engine, or all)'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - i18n-translator
          - media-upload
          - sentence-engine
      message:
        description: 'Deployment message'
        required: false
        default: 'Manual deployment from admin dashboard'

jobs:
  check-triggers:
    runs-on: ubuntu-latest
    outputs:
      should-build: ${{ steps.check.outputs.should-build }}
      build-i18n: ${{ steps.check.outputs.build-i18n }}
      build-media: ${{ steps.check.outputs.build-media }}
      build-sentence: ${{ steps.check.outputs.build-sentence }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2
          
      - name: Check triggers
        id: check
        run: |
          # Default to no builds
          echo "should-build=false" >> $GITHUB_OUTPUT
          echo "build-i18n=false" >> $GITHUB_OUTPUT
          echo "build-media=false" >> $GITHUB_OUTPUT
          echo "build-sentence=false" >> $GITHUB_OUTPUT
          
          # Handle workflow_dispatch trigger
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            TARGET="${{ github.event.inputs.target }}"
            echo "Workflow dispatch target: $TARGET"
            
            if [[ "$TARGET" == "all" ]]; then
              echo "should-build=true" >> $GITHUB_OUTPUT
              echo "build-i18n=true" >> $GITHUB_OUTPUT
              echo "build-media=true" >> $GITHUB_OUTPUT
              echo "build-sentence=true" >> $GITHUB_OUTPUT
            elif [[ "$TARGET" == "i18n-translator" ]]; then
              echo "build-i18n=true" >> $GITHUB_OUTPUT
              echo "should-build=true" >> $GITHUB_OUTPUT
            elif [[ "$TARGET" == "media-upload" ]]; then
              echo "build-media=true" >> $GITHUB_OUTPUT
              echo "should-build=true" >> $GITHUB_OUTPUT
            elif [[ "$TARGET" == "sentence-engine" ]]; then
              echo "build-sentence=true" >> $GITHUB_OUTPUT
              echo "should-build=true" >> $GITHUB_OUTPUT
            fi
            exit 0
          fi
          
          # Handle push trigger - check commit message
          COMMIT_MSG=$(cat <<'EOF'
${{ github.event.head_commit.message }}
EOF
)
          echo "Commit message: $COMMIT_MSG"
          
          # Check for build all triggers
          if [[ "$COMMIT_MSG" == *"[build:all]"* ]] || [[ "$COMMIT_MSG" == *"[build:workers]"* ]]; then
            echo "should-build=true" >> $GITHUB_OUTPUT
            echo "build-i18n=true" >> $GITHUB_OUTPUT
            echo "build-media=true" >> $GITHUB_OUTPUT
            echo "build-sentence=true" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Check for specific worker triggers
          if [[ "$COMMIT_MSG" == *"[build:i18n-translator]"* ]]; then
            echo "build-i18n=true" >> $GITHUB_OUTPUT
            echo "should-build=true" >> $GITHUB_OUTPUT
          fi
          if [[ "$COMMIT_MSG" == *"[build:media-upload]"* ]]; then
            echo "build-media=true" >> $GITHUB_OUTPUT
            echo "should-build=true" >> $GITHUB_OUTPUT
          fi
          if [[ "$COMMIT_MSG" == *"[build:sentence-engine]"* ]]; then
            echo "build-sentence=true" >> $GITHUB_OUTPUT
            echo "should-build=true" >> $GITHUB_OUTPUT
          fi

  check-environment:
    needs: check-triggers
    if: needs.check-triggers.outputs.should-build == 'true'
    runs-on: ubuntu-latest
    name: Check Required Environment Variables
    steps:
      - name: Check Cloudflare API Token
        run: |
          if [ -z "${{ secrets.CLOUDFLARE_API_TOKEN }}" ]; then
            echo "❌ ERROR: Missing required secret CLOUDFLARE_API_TOKEN"
            echo "Please add this secret in GitHub Settings > Secrets and variables > Actions"
            exit 1
          fi
          echo "✅ CLOUDFLARE_API_TOKEN is configured"

  deploy:
    needs: [check-triggers, check-environment]
    if: needs.check-triggers.outputs.should-build == 'true'
    runs-on: ubuntu-latest
    name: Deploy Workers
    steps:
      - uses: actions/checkout@v4
      
      - uses: pnpm/action-setup@v2
        with:
          version: 8
          
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'
          
      - name: Install dependencies
        run: pnpm install --no-frozen-lockfile
        
      - name: Build workers
        run: |
          cd workers
          pnpm --filter=@tiko/i18n-translator-worker build
          pnpm --filter=@tiko/media-upload-worker build
          pnpm --filter=@tiko/sentence-engine-worker build
          
      - name: Deploy i18n-translator worker
        if: needs.check-triggers.outputs.build-i18n == 'true'
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: dc2b7d14a69351375cab6de9a13ddee9
          workingDirectory: 'workers/i18n-translator'
          command: deploy --env production
          wranglerVersion: 'latest'
          
      - name: Deploy media-upload worker
        if: needs.check-triggers.outputs.build-media == 'true'
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: dc2b7d14a69351375cab6de9a13ddee9
          workingDirectory: 'workers/media-upload'
          command: deploy --env production
          wranglerVersion: 'latest'
          
      - name: Deploy sentence-engine worker
        if: needs.check-triggers.outputs.build-sentence == 'true'
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: dc2b7d14a69351375cab6de9a13ddee9
          workingDirectory: 'workers/sentence-engine'
          command: deploy --env production
          wranglerVersion: 'latest'