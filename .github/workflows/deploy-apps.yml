name: Deploy Apps to Cloudflare Pages

on:
  push:
    branches:
      - master
      - develop
  workflow_dispatch:
    inputs:
      target:
        description: 'Target app to deploy (timer, yes-no, cards, sequence, radio, todo, type, or all)'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - timer
          - yes-no
          - cards
          - sequence
          - radio
          - todo
          - type
      message:
        description: 'Deployment message'
        required: false
        default: 'Manual deployment from admin dashboard'

jobs:
  determine-environment:
    uses: ./.github/workflows/reusable-determine-environment.yml

  check-triggers:
    runs-on: ubuntu-latest
    outputs:
      build-all-apps: ${{ steps.check.outputs.build-all-apps }}
      build-timer: ${{ steps.check.outputs.build-timer }}
      build-yes-no: ${{ steps.check.outputs.build-yes-no }}
      build-cards: ${{ steps.check.outputs.build-cards }}
      build-sequence: ${{ steps.check.outputs.build-sequence }}
      build-radio: ${{ steps.check.outputs.build-radio }}
      build-todo: ${{ steps.check.outputs.build-todo }}
      build-type: ${{ steps.check.outputs.build-type }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Check triggers
        id: check
        run: |
          # Default to no builds
          echo "build-timer=false" >> $GITHUB_OUTPUT
          echo "build-yes-no=false" >> $GITHUB_OUTPUT
          echo "build-cards=false" >> $GITHUB_OUTPUT
          echo "build-sequence=false" >> $GITHUB_OUTPUT
          echo "build-radio=false" >> $GITHUB_OUTPUT
          echo "build-todo=false" >> $GITHUB_OUTPUT
          echo "build-type=false" >> $GITHUB_OUTPUT

          # Handle workflow_dispatch trigger
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            TARGET="${{ github.event.inputs.target }}"
            echo "Workflow dispatch target: $TARGET"

            if [[ "$TARGET" == "all" ]]; then
              echo "build-timer=true" >> $GITHUB_OUTPUT
              echo "build-yes-no=true" >> $GITHUB_OUTPUT
              echo "build-cards=true" >> $GITHUB_OUTPUT
              echo "build-sequence=true" >> $GITHUB_OUTPUT
              echo "build-radio=true" >> $GITHUB_OUTPUT
              echo "build-todo=true" >> $GITHUB_OUTPUT
              echo "build-type=true" >> $GITHUB_OUTPUT
            elif [[ "$TARGET" == "timer" ]]; then
              echo "build-timer=true" >> $GITHUB_OUTPUT
            elif [[ "$TARGET" == "yes-no" ]]; then
              echo "build-yes-no=true" >> $GITHUB_OUTPUT
            elif [[ "$TARGET" == "cards" ]]; then
              echo "build-cards=true" >> $GITHUB_OUTPUT
            elif [[ "$TARGET" == "sequence" ]]; then
              echo "build-sequence=true" >> $GITHUB_OUTPUT
            elif [[ "$TARGET" == "radio" ]]; then
              echo "build-radio=true" >> $GITHUB_OUTPUT
            elif [[ "$TARGET" == "todo" ]]; then
              echo "build-todo=true" >> $GITHUB_OUTPUT
            elif [[ "$TARGET" == "type" ]]; then
              echo "build-type=true" >> $GITHUB_OUTPUT
            fi
            exit 0
          fi

          # For develop branch, check changed files instead of commit message
          if [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
            echo "Develop branch detected - checking changed files..."
            
            # Get list of changed files
            CHANGED_FILES=$(git diff --name-only HEAD^ HEAD || git diff --name-only HEAD)
            echo "Changed files:"
            echo "$CHANGED_FILES"
            
            # Check if UI or Core packages changed (deploy all apps)
            if echo "$CHANGED_FILES" | grep -E "^packages/(ui|core)/" > /dev/null; then
              echo "UI or Core package changed - deploying all apps"
              echo "build-timer=true" >> $GITHUB_OUTPUT
              echo "build-yes-no=true" >> $GITHUB_OUTPUT
              echo "build-cards=true" >> $GITHUB_OUTPUT
              echo "build-sequence=true" >> $GITHUB_OUTPUT
              echo "build-radio=true" >> $GITHUB_OUTPUT
              echo "build-todo=true" >> $GITHUB_OUTPUT
              echo "build-type=true" >> $GITHUB_OUTPUT
              exit 0
            fi
            
            # Check individual apps
            if echo "$CHANGED_FILES" | grep -E "^apps/timer/" > /dev/null; then
              echo "build-timer=true" >> $GITHUB_OUTPUT
            fi
            if echo "$CHANGED_FILES" | grep -E "^apps/yes-no/" > /dev/null; then
              echo "build-yes-no=true" >> $GITHUB_OUTPUT
            fi
            if echo "$CHANGED_FILES" | grep -E "^apps/cards/" > /dev/null; then
              echo "build-cards=true" >> $GITHUB_OUTPUT
            fi
            if echo "$CHANGED_FILES" | grep -E "^apps/sequence/" > /dev/null; then
              echo "build-sequence=true" >> $GITHUB_OUTPUT
            fi
            if echo "$CHANGED_FILES" | grep -E "^apps/radio/" > /dev/null; then
              echo "build-radio=true" >> $GITHUB_OUTPUT
            fi
            if echo "$CHANGED_FILES" | grep -E "^apps/todo/" > /dev/null; then
              echo "build-todo=true" >> $GITHUB_OUTPUT
            fi
            if echo "$CHANGED_FILES" | grep -E "^apps/type/" > /dev/null; then
              echo "build-type=true" >> $GITHUB_OUTPUT
            fi
            
            exit 0
          fi

          # For master branch, handle push trigger - check commit message
          COMMIT_MSG='${{ github.event.head_commit.message }}'
          echo "Commit message: $COMMIT_MSG"

          # Check for build all triggers
          if [[ "$COMMIT_MSG" == *"[build:all]"* ]] || [[ "$COMMIT_MSG" == *"[build:apps]"* ]]; then
            echo "build-timer=true" >> $GITHUB_OUTPUT
            echo "build-yes-no=true" >> $GITHUB_OUTPUT
            echo "build-cards=true" >> $GITHUB_OUTPUT
            echo "build-sequence=true" >> $GITHUB_OUTPUT
            echo "build-radio=true" >> $GITHUB_OUTPUT
            echo "build-todo=true" >> $GITHUB_OUTPUT
            echo "build-type=true" >> $GITHUB_OUTPUT
            exit 0
          fi

          # Check for specific app triggers
          if [[ "$COMMIT_MSG" == *"[build:timer]"* ]]; then
            echo "build-timer=true" >> $GITHUB_OUTPUT
          fi
          if [[ "$COMMIT_MSG" == *"[build:cards]"* ]]; then
            echo "build-cards=true" >> $GITHUB_OUTPUT
          fi
          if [[ "$COMMIT_MSG" == *"[build:sequence]"* ]]; then
            echo "build-sequence=true" >> $GITHUB_OUTPUT
          fi
          if [[ "$COMMIT_MSG" == *"[build:radio]"* ]]; then
            echo "build-radio=true" >> $GITHUB_OUTPUT
          fi
          if [[ "$COMMIT_MSG" == *"[build:todo]"* ]]; then
            echo "build-todo=true" >> $GITHUB_OUTPUT
          fi
          if [[ "$COMMIT_MSG" == *"[build:yes-no]"* ]]; then
            echo "build-yes-no=true" >> $GITHUB_OUTPUT
          fi
          if [[ "$COMMIT_MSG" == *"[build:type]"* ]]; then
            echo "build-type=true" >> $GITHUB_OUTPUT
          fi

  check-environment:
    needs: check-triggers
    if: needs.check-triggers.outputs.build-timer == 'true' || needs.check-triggers.outputs.build-yes-no == 'true' || needs.check-triggers.outputs.build-cards == 'true' || needs.check-triggers.outputs.build-sequence == 'true' || needs.check-triggers.outputs.build-radio == 'true' || needs.check-triggers.outputs.build-todo == 'true' || needs.check-triggers.outputs.build-type == 'true'
    uses: ./.github/workflows/reusable-check-environment.yml
    secrets: inherit

  generate-translations:
    needs: [check-triggers, check-environment]
    if: needs.check-triggers.outputs.build-timer == 'true' || needs.check-triggers.outputs.build-yes-no == 'true' || needs.check-triggers.outputs.build-cards == 'true' || needs.check-triggers.outputs.build-sequence == 'true' || needs.check-triggers.outputs.build-radio == 'true' || needs.check-triggers.outputs.build-todo == 'true' || needs.check-triggers.outputs.build-type == 'true'
    runs-on: ubuntu-latest
    name: Generate Translations
    steps:
      - uses: actions/checkout@v4

      - uses: pnpm/action-setup@v2
        with:
          version: 8

      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install dependencies
        run: |
          # Install only the required packages for translations
          pnpm install --no-frozen-lockfile --filter=@tiko/ui --filter=@tiko/core

      - name: Generate i18n translations
        run: pnpm generate:i18n:worker:prod
        env:
          VITE_SUPABASE_URL: ${{ secrets.VITE_SUPABASE_URL }}
          VITE_SUPABASE_ANON_KEY: ${{ secrets.VITE_SUPABASE_ANON_KEY }}
          VITE_SUPABASE_PUBLISHABLE_KEY: ${{ secrets.VITE_SUPABASE_PUBLISHABLE_KEY }}

      - name: Upload translation files
        uses: actions/upload-artifact@v4
        with:
          name: i18n-translations
          path: packages/core/src/i18n/generated/
          retention-days: 1

  deploy-timer:
    needs: [determine-environment, check-triggers, check-environment, generate-translations]
    if: needs.check-triggers.outputs.build-timer == 'true'
    runs-on: ubuntu-latest
    name: Deploy Timer App (${{ needs.determine-environment.outputs.environment }})
    steps:
      - uses: actions/checkout@v4

      - uses: pnpm/action-setup@v2
        with:
          version: 8

      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install dependencies
        run: |
          # Install only the required packages for Timer app build
          pnpm install --no-frozen-lockfile --filter=timer...

      - name: Download translation files
        uses: actions/download-artifact@v4
        with:
          name: i18n-translations
          path: packages/core/src/i18n/generated/

      - name: Build Timer app
        run: |
          pnpm --filter=@tiko/ui build
          pnpm --filter=@tiko/core build
          pnpm --filter=timer build
        env:
          VITE_SUPABASE_URL: ${{ secrets.VITE_SUPABASE_URL }}
          VITE_SUPABASE_ANON_KEY: ${{ secrets.VITE_SUPABASE_ANON_KEY }}
          VITE_SUPABASE_PUBLISHABLE_KEY: ${{ secrets.VITE_SUPABASE_PUBLISHABLE_KEY }}
          VITE_TTS_WORKER_URL: ${{ secrets.VITE_TTS_WORKER_URL }}
          VITE_TTS_CDN_URL: ${{ secrets.VITE_TTS_CDN_URL }}
          VITE_SITE_URL: https://${{ needs.determine-environment.outputs.url-suffix }}timer.tikoapps.org

      - name: Deploy to Cloudflare Pages
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: dc2b7d14a69351375cab6de9a13ddee9
          command: pages deploy ./apps/timer/dist --project-name=tiko-timer${{ needs.determine-environment.outputs.branch-suffix }} --commit-dirty=true --branch=${{ github.ref_name }}

  deploy-yes-no:
    needs: [determine-environment, check-triggers, check-environment, generate-translations]
    if: needs.check-triggers.outputs.build-yes-no == 'true'
    runs-on: ubuntu-latest
    name: Deploy Yes-No App (${{ needs.determine-environment.outputs.environment }})
    steps:
      - uses: actions/checkout@v4

      - uses: pnpm/action-setup@v2
        with:
          version: 8

      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install dependencies
        run: |
          # Install only the required packages for Yes-No app build
          pnpm install --no-frozen-lockfile --filter=yes-no...

      - name: Download translation files
        uses: actions/download-artifact@v4
        with:
          name: i18n-translations
          path: packages/core/src/i18n/generated/

      - name: Build Yes-No app
        run: |
          pnpm --filter=@tiko/ui build
          pnpm --filter=@tiko/core build
          pnpm --filter=yes-no build
        env:
          VITE_SUPABASE_URL: ${{ secrets.VITE_SUPABASE_URL }}
          VITE_SUPABASE_ANON_KEY: ${{ secrets.VITE_SUPABASE_ANON_KEY }}
          VITE_SUPABASE_PUBLISHABLE_KEY: ${{ secrets.VITE_SUPABASE_PUBLISHABLE_KEY }}
          VITE_TTS_WORKER_URL: ${{ secrets.VITE_TTS_WORKER_URL }}
          VITE_TTS_CDN_URL: ${{ secrets.VITE_TTS_CDN_URL }}
          VITE_SITE_URL: https://${{ needs.determine-environment.outputs.url-suffix }}yesno.tikoapps.org

      - name: Deploy to Cloudflare Pages
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: dc2b7d14a69351375cab6de9a13ddee9
          command: pages deploy ./apps/yes-no/dist --project-name=tiko-yes-no${{ needs.determine-environment.outputs.branch-suffix }} --commit-dirty=true --branch=${{ github.ref_name }}

  deploy-cards:
    needs: [determine-environment, check-triggers, check-environment, generate-translations]
    if: needs.check-triggers.outputs.build-cards == 'true'
    runs-on: ubuntu-latest
    name: Deploy Cards App (${{ needs.determine-environment.outputs.environment }})
    steps:
      - uses: actions/checkout@v4

      - uses: pnpm/action-setup@v2
        with:
          version: 8

      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install dependencies
        run: |
          # Install only the required packages for Cards app build
          pnpm install --no-frozen-lockfile --filter=cards...

      - name: Download translation files
        uses: actions/download-artifact@v4
        with:
          name: i18n-translations
          path: packages/core/src/i18n/generated/

      - name: Build Cards app
        run: |
          pnpm --filter=@tiko/ui build
          pnpm --filter=@tiko/core build
          pnpm --filter=cards build
        env:
          VITE_SUPABASE_URL: ${{ secrets.VITE_SUPABASE_URL }}
          VITE_SUPABASE_ANON_KEY: ${{ secrets.VITE_SUPABASE_ANON_KEY }}
          VITE_SUPABASE_PUBLISHABLE_KEY: ${{ secrets.VITE_SUPABASE_PUBLISHABLE_KEY }}
          VITE_TTS_WORKER_URL: ${{ secrets.VITE_TTS_WORKER_URL }}
          VITE_TTS_CDN_URL: ${{ secrets.VITE_TTS_CDN_URL }}
          VITE_SITE_URL: https://${{ needs.determine-environment.outputs.url-suffix }}cards.tikoapps.org

      - name: Deploy to Cloudflare Pages
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: dc2b7d14a69351375cab6de9a13ddee9
          command: pages deploy ./apps/cards/dist --project-name=tiko-cards${{ needs.determine-environment.outputs.branch-suffix }} --commit-dirty=true --branch=${{ github.ref_name }}

  deploy-radio:
    needs: [determine-environment, check-triggers, check-environment, generate-translations]
    if: needs.check-triggers.outputs.build-radio == 'true'
    runs-on: ubuntu-latest
    name: Deploy Radio App (${{ needs.determine-environment.outputs.environment }})
    steps:
      - uses: actions/checkout@v4

      - uses: pnpm/action-setup@v2
        with:
          version: 8

      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install dependencies
        run: |
          # Install only the required packages for Radio app build
          pnpm install --no-frozen-lockfile --filter=radio...

      - name: Download translation files
        uses: actions/download-artifact@v4
        with:
          name: i18n-translations
          path: packages/core/src/i18n/generated/

      - name: Build Radio app
        run: |
          pnpm --filter=@tiko/ui build
          pnpm --filter=@tiko/core build
          pnpm --filter=radio build
        env:
          VITE_SUPABASE_URL: ${{ secrets.VITE_SUPABASE_URL }}
          VITE_SUPABASE_ANON_KEY: ${{ secrets.VITE_SUPABASE_ANON_KEY }}
          VITE_SUPABASE_PUBLISHABLE_KEY: ${{ secrets.VITE_SUPABASE_PUBLISHABLE_KEY }}
          VITE_TTS_WORKER_URL: ${{ secrets.VITE_TTS_WORKER_URL }}
          VITE_TTS_CDN_URL: ${{ secrets.VITE_TTS_CDN_URL }}
          VITE_SITE_URL: https://${{ needs.determine-environment.outputs.url-suffix }}radio.tikoapps.org

      - name: Deploy to Cloudflare Pages
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: dc2b7d14a69351375cab6de9a13ddee9
          command: pages deploy ./apps/radio/dist --project-name=tiko-radio${{ needs.determine-environment.outputs.branch-suffix }} --commit-dirty=true --branch=${{ github.ref_name }}

  deploy-todo:
    needs: [determine-environment, check-triggers, check-environment, generate-translations]
    if: needs.check-triggers.outputs.build-todo == 'true'
    runs-on: ubuntu-latest
    name: Deploy Todo App (${{ needs.determine-environment.outputs.environment }})
    steps:
      - uses: actions/checkout@v4

      - uses: pnpm/action-setup@v2
        with:
          version: 8

      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install dependencies
        run: |
          # Install only the required packages for Todo app build
          pnpm install --no-frozen-lockfile --filter=todo...

      - name: Download translation files
        uses: actions/download-artifact@v4
        with:
          name: i18n-translations
          path: packages/core/src/i18n/generated/

      - name: Build Todo app
        run: |
          pnpm --filter=@tiko/ui build
          pnpm --filter=@tiko/core build
          pnpm --filter=todo build
        env:
          VITE_SUPABASE_URL: ${{ secrets.VITE_SUPABASE_URL }}
          VITE_SUPABASE_ANON_KEY: ${{ secrets.VITE_SUPABASE_ANON_KEY }}
          VITE_SUPABASE_PUBLISHABLE_KEY: ${{ secrets.VITE_SUPABASE_PUBLISHABLE_KEY }}
          VITE_TTS_WORKER_URL: ${{ secrets.VITE_TTS_WORKER_URL }}
          VITE_TTS_CDN_URL: ${{ secrets.VITE_TTS_CDN_URL }}
          VITE_SITE_URL: https://${{ needs.determine-environment.outputs.url-suffix }}todo.tikoapps.org

      - name: Deploy to Cloudflare Pages
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: dc2b7d14a69351375cab6de9a13ddee9
          command: pages deploy ./apps/todo/dist --project-name=tiko-todo${{ needs.determine-environment.outputs.branch-suffix }} --commit-dirty=true --branch=${{ github.ref_name }}

  deploy-type:
    needs: [determine-environment, check-triggers, check-environment, generate-translations]
    if: needs.check-triggers.outputs.build-type == 'true'
    runs-on: ubuntu-latest
    name: Deploy Type App (${{ needs.determine-environment.outputs.environment }})
    steps:
      - uses: actions/checkout@v4

      - uses: pnpm/action-setup@v2
        with:
          version: 8

      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install dependencies
        run: |
          # Install only the required packages for Type app build
          pnpm install --no-frozen-lockfile --filter=type...

      - name: Download translation files
        uses: actions/download-artifact@v4
        with:
          name: i18n-translations
          path: packages/core/src/i18n/generated/

      - name: Build Type app
        run: |
          pnpm --filter=@tiko/ui build
          pnpm --filter=@tiko/core build
          pnpm --filter=type build
        env:
          VITE_SUPABASE_URL: ${{ secrets.VITE_SUPABASE_URL }}
          VITE_SUPABASE_ANON_KEY: ${{ secrets.VITE_SUPABASE_ANON_KEY }}
          VITE_SUPABASE_PUBLISHABLE_KEY: ${{ secrets.VITE_SUPABASE_PUBLISHABLE_KEY }}
          VITE_TTS_WORKER_URL: ${{ secrets.VITE_TTS_WORKER_URL }}
          VITE_TTS_CDN_URL: ${{ secrets.VITE_TTS_CDN_URL }}
          VITE_SITE_URL: https://${{ needs.determine-environment.outputs.url-suffix }}type.tikoapps.org

      - name: Deploy to Cloudflare Pages
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: dc2b7d14a69351375cab6de9a13ddee9
          command: pages deploy ./apps/type/dist --project-name=tiko-type${{ needs.determine-environment.outputs.branch-suffix }} --commit-dirty=true --branch=${{ github.ref_name }}

  deploy-sequence:
    needs: [determine-environment, check-triggers, check-environment, generate-translations]
    if: needs.check-triggers.outputs.build-sequence == 'true'
    runs-on: ubuntu-latest
    name: Deploy Sequence App (${{ needs.determine-environment.outputs.environment }})
    steps:
      - uses: actions/checkout@v4

      - uses: pnpm/action-setup@v2
        with:
          version: 8

      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install dependencies
        run: |
          # Install only the required packages for Sequence app build
          pnpm install --no-frozen-lockfile --filter=sequence...

      - name: Download translation files
        uses: actions/download-artifact@v4
        with:
          name: i18n-translations
          path: packages/core/src/i18n/generated/

      - name: Build Sequence app
        run: |
          pnpm --filter=@tiko/ui build
          pnpm --filter=@tiko/core build
          pnpm --filter=@tiko/animations build
          cd apps/sequence && pnpm run build
        env:
          VITE_SUPABASE_URL: ${{ secrets.VITE_SUPABASE_URL }}
          VITE_SUPABASE_ANON_KEY: ${{ secrets.VITE_SUPABASE_ANON_KEY }}
          VITE_SUPABASE_PUBLISHABLE_KEY: ${{ secrets.VITE_SUPABASE_PUBLISHABLE_KEY }}
          VITE_TTS_WORKER_URL: ${{ secrets.VITE_TTS_WORKER_URL }}
          VITE_TTS_CDN_URL: ${{ secrets.VITE_TTS_CDN_URL }}
          VITE_SITE_URL: https://${{ needs.determine-environment.outputs.url-suffix }}sequence.tikoapps.org

      - name: Deploy to Cloudflare Pages
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: dc2b7d14a69351375cab6de9a13ddee9
          command: pages deploy ./apps/sequence/dist --project-name=tiko-sequence${{ needs.determine-environment.outputs.branch-suffix }} --commit-dirty=true --branch=${{ github.ref_name }}

  # Skip tiko app for now as it has build issues
  # deploy-tiko:
  #   needs: check-triggers
  #   if: needs.check-triggers.outputs.build-tiko == 'true'
  #   ...
