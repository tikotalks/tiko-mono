name: Deploy Apps to Cloudflare Pages

on:
  push:
    branches:
      - master
  workflow_dispatch:
    inputs:
      target:
        description: 'Target app to deploy (timer, yes-no, cards, radio, todo, type, or all)'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - timer
          - yes-no
          - cards
          - radio
          - todo
          - type
      message:
        description: 'Deployment message'
        required: false
        default: 'Manual deployment from admin dashboard'

jobs:
  check-triggers:
    runs-on: ubuntu-latest
    outputs:
      build-all-apps: ${{ steps.check.outputs.build-all-apps }}
      build-timer: ${{ steps.check.outputs.build-timer }}
      build-yes-no: ${{ steps.check.outputs.build-yes-no }}
      build-cards: ${{ steps.check.outputs.build-cards }}
      build-radio: ${{ steps.check.outputs.build-radio }}
      build-todo: ${{ steps.check.outputs.build-todo }}
      build-type: ${{ steps.check.outputs.build-type }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2
          
      - name: Check triggers
        id: check
        run: |
          # Default to no builds
          echo "build-timer=false" >> $GITHUB_OUTPUT
          echo "build-yes-no=false" >> $GITHUB_OUTPUT
          echo "build-cards=false" >> $GITHUB_OUTPUT
          echo "build-radio=false" >> $GITHUB_OUTPUT
          echo "build-todo=false" >> $GITHUB_OUTPUT
          echo "build-type=false" >> $GITHUB_OUTPUT
          
          # Handle workflow_dispatch trigger
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            TARGET="${{ github.event.inputs.target }}"
            echo "Workflow dispatch target: $TARGET"
            
            if [[ "$TARGET" == "all" ]]; then
              echo "build-timer=true" >> $GITHUB_OUTPUT
              echo "build-yes-no=true" >> $GITHUB_OUTPUT
              echo "build-cards=true" >> $GITHUB_OUTPUT
              echo "build-radio=true" >> $GITHUB_OUTPUT
              echo "build-todo=true" >> $GITHUB_OUTPUT
              echo "build-type=true" >> $GITHUB_OUTPUT
            elif [[ "$TARGET" == "timer" ]]; then
              echo "build-timer=true" >> $GITHUB_OUTPUT
            elif [[ "$TARGET" == "yes-no" ]]; then
              echo "build-yes-no=true" >> $GITHUB_OUTPUT
            elif [[ "$TARGET" == "cards" ]]; then
              echo "build-cards=true" >> $GITHUB_OUTPUT
            elif [[ "$TARGET" == "radio" ]]; then
              echo "build-radio=true" >> $GITHUB_OUTPUT
            elif [[ "$TARGET" == "todo" ]]; then
              echo "build-todo=true" >> $GITHUB_OUTPUT
            elif [[ "$TARGET" == "type" ]]; then
              echo "build-type=true" >> $GITHUB_OUTPUT
            fi
            exit 0
          fi
          
          # Handle push trigger - check commit message
          COMMIT_MSG='${{ github.event.head_commit.message }}'
          echo "Commit message: $COMMIT_MSG"
          
          # Check for build all triggers
          if [[ "$COMMIT_MSG" == *"[build:all]"* ]] || [[ "$COMMIT_MSG" == *"[build:apps]"* ]]; then
            echo "build-timer=true" >> $GITHUB_OUTPUT
            echo "build-yes-no=true" >> $GITHUB_OUTPUT
            echo "build-cards=true" >> $GITHUB_OUTPUT
            echo "build-radio=true" >> $GITHUB_OUTPUT
            echo "build-todo=true" >> $GITHUB_OUTPUT
            echo "build-type=true" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Check for specific app triggers
          if [[ "$COMMIT_MSG" == *"[build:timer]"* ]]; then
            echo "build-timer=true" >> $GITHUB_OUTPUT
          fi
          if [[ "$COMMIT_MSG" == *"[build:cards]"* ]]; then
            echo "build-cards=true" >> $GITHUB_OUTPUT
          fi
          if [[ "$COMMIT_MSG" == *"[build:radio]"* ]]; then
            echo "build-radio=true" >> $GITHUB_OUTPUT
          fi
          if [[ "$COMMIT_MSG" == *"[build:todo]"* ]]; then
            echo "build-todo=true" >> $GITHUB_OUTPUT
          fi
          if [[ "$COMMIT_MSG" == *"[build:yes-no]"* ]]; then
            echo "build-yes-no=true" >> $GITHUB_OUTPUT
          fi
          if [[ "$COMMIT_MSG" == *"[build:type]"* ]]; then
            echo "build-type=true" >> $GITHUB_OUTPUT
          fi

  check-environment:
    needs: check-triggers
    if: needs.check-triggers.outputs.build-timer == 'true' || needs.check-triggers.outputs.build-yes-no == 'true' || needs.check-triggers.outputs.build-cards == 'true' || needs.check-triggers.outputs.build-radio == 'true' || needs.check-triggers.outputs.build-todo == 'true' || needs.check-triggers.outputs.build-type == 'true'
    runs-on: ubuntu-latest
    name: Check Required Environment Variables
    steps:
      - name: Check Cloudflare API Token
        run: |
          if [ -z "${{ secrets.CLOUDFLARE_API_TOKEN }}" ]; then
            echo "❌ ERROR: Missing required secret CLOUDFLARE_API_TOKEN"
            echo "Please add this secret in GitHub Settings > Secrets and variables > Actions"
            exit 1
          fi
          echo "✅ CLOUDFLARE_API_TOKEN is configured"
      
      - name: Check Supabase Environment Variables
        run: |
          MISSING_VARS=""
          
          if [ -z "${{ secrets.VITE_SUPABASE_URL }}" ]; then
            MISSING_VARS="$MISSING_VARS VITE_SUPABASE_URL"
          fi
          
          if [ -z "${{ secrets.VITE_SUPABASE_ANON_KEY }}" ]; then
            MISSING_VARS="$MISSING_VARS VITE_SUPABASE_ANON_KEY"
          fi
          
          if [ -n "$MISSING_VARS" ]; then
            echo "❌ ERROR: Missing required Supabase secrets:"
            for var in $MISSING_VARS; do
              echo "  - $var"
            done
            echo ""
            echo "Please add these secrets in GitHub Settings > Secrets and variables > Actions"
            exit 1
          fi
          
          echo "✅ Supabase environment variables are configured"
      
      - name: Check Cloudflare Project Names
        run: |
          # Note: Cloudflare Pages projects are created automatically from git
          # No additional secrets needed for project names
          echo "✅ Cloudflare Pages will use git repository structure"

  deploy-timer:
    needs: [check-triggers, check-environment]
    if: needs.check-triggers.outputs.build-timer == 'true'
    runs-on: ubuntu-latest
    name: Deploy Timer App
    steps:
      - uses: actions/checkout@v4
      
      - uses: pnpm/action-setup@v2
        with:
          version: 8
          
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'
          
      - name: Install dependencies
        run: pnpm install --no-frozen-lockfile
        
      - name: Generate i18n translations
        run: pnpm generate:i18n:worker:prod
        
      - name: Build Timer app
        run: |
          pnpm --filter=@tiko/ui build
          pnpm --filter=@tiko/core build
          pnpm --filter=timer build
        env:
          VITE_SUPABASE_URL: ${{ secrets.VITE_SUPABASE_URL }}
          VITE_SUPABASE_ANON_KEY: ${{ secrets.VITE_SUPABASE_ANON_KEY }}
          
      - name: Install Wrangler
        run: npm install -g wrangler
        
      - name: Deploy to Cloudflare Pages
        run: |
          wrangler pages project create tiko-timer --production-branch=master || echo "Project already exists"
          wrangler pages deploy ./apps/timer/dist --project-name=tiko-timer
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: dc2b7d14a69351375cab6de9a13ddee9

  deploy-yes-no:
    needs: [check-triggers, check-environment]
    if: needs.check-triggers.outputs.build-yes-no == 'true'
    runs-on: ubuntu-latest
    name: Deploy Yes-No App
    steps:
      - uses: actions/checkout@v4
      
      - uses: pnpm/action-setup@v2
        with:
          version: 8
          
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'
          
      - name: Install dependencies
        run: pnpm install --no-frozen-lockfile
        
      - name: Generate i18n translations
        run: pnpm generate:i18n:worker:prod
        
      - name: Build Yes-No app
        run: |
          pnpm --filter=@tiko/ui build
          pnpm --filter=@tiko/core build
          pnpm --filter=yes-no build
        env:
          VITE_SUPABASE_URL: ${{ secrets.VITE_SUPABASE_URL }}
          VITE_SUPABASE_ANON_KEY: ${{ secrets.VITE_SUPABASE_ANON_KEY }}
          
      - name: Install Wrangler
        run: npm install -g wrangler
        
      - name: Deploy to Cloudflare Pages
        run: |
          wrangler pages project create tiko-yes-no --production-branch=master || echo "Project already exists"
          wrangler pages deploy ./apps/yes-no/dist --project-name=tiko-yes-no
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: dc2b7d14a69351375cab6de9a13ddee9

  deploy-cards:
    needs: [check-triggers, check-environment]
    if: needs.check-triggers.outputs.build-cards == 'true'
    runs-on: ubuntu-latest
    name: Deploy Cards App
    steps:
      - uses: actions/checkout@v4
      
      - uses: pnpm/action-setup@v2
        with:
          version: 8
          
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'
          
      - name: Install dependencies
        run: pnpm install --no-frozen-lockfile
        
      - name: Generate i18n translations
        run: pnpm generate:i18n:worker:prod
        
      - name: Build Cards app
        run: |
          pnpm --filter=@tiko/ui build
          pnpm --filter=@tiko/core build
          pnpm --filter=cards build
        env:
          VITE_SUPABASE_URL: ${{ secrets.VITE_SUPABASE_URL }}
          VITE_SUPABASE_ANON_KEY: ${{ secrets.VITE_SUPABASE_ANON_KEY }}
          
      - name: Install Wrangler
        run: npm install -g wrangler
        
      - name: Deploy to Cloudflare Pages
        run: |
          wrangler pages project create tiko-cards --production-branch=master || echo "Project already exists"
          wrangler pages deploy ./apps/cards/dist --project-name=tiko-cards
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: dc2b7d14a69351375cab6de9a13ddee9

  deploy-radio:
    needs: [check-triggers, check-environment]
    if: needs.check-triggers.outputs.build-radio == 'true'
    runs-on: ubuntu-latest
    name: Deploy Radio App
    steps:
      - uses: actions/checkout@v4
      
      - uses: pnpm/action-setup@v2
        with:
          version: 8
          
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'
          
      - name: Install dependencies
        run: pnpm install --no-frozen-lockfile
        
      - name: Generate i18n translations
        run: pnpm generate:i18n:worker:prod
        
      - name: Build Radio app
        run: |
          pnpm --filter=@tiko/ui build
          pnpm --filter=@tiko/core build
          pnpm --filter=radio build
        env:
          VITE_SUPABASE_URL: ${{ secrets.VITE_SUPABASE_URL }}
          VITE_SUPABASE_ANON_KEY: ${{ secrets.VITE_SUPABASE_ANON_KEY }}
          
      - name: Install Wrangler
        run: npm install -g wrangler
        
      - name: Deploy to Cloudflare Pages
        run: |
          wrangler pages project create tiko-radio --production-branch=master || echo "Project already exists"
          wrangler pages deploy ./apps/radio/dist --project-name=tiko-radio
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: dc2b7d14a69351375cab6de9a13ddee9

  deploy-todo:
    needs: [check-triggers, check-environment]
    if: needs.check-triggers.outputs.build-todo == 'true'
    runs-on: ubuntu-latest
    name: Deploy Todo App
    steps:
      - uses: actions/checkout@v4
      
      - uses: pnpm/action-setup@v2
        with:
          version: 8
          
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'
          
      - name: Install dependencies
        run: pnpm install --no-frozen-lockfile
        
      - name: Generate i18n translations
        run: pnpm generate:i18n:worker:prod
        
      - name: Build Todo app
        run: |
          pnpm --filter=@tiko/ui build
          pnpm --filter=@tiko/core build
          pnpm --filter=todo build
        env:
          VITE_SUPABASE_URL: ${{ secrets.VITE_SUPABASE_URL }}
          VITE_SUPABASE_ANON_KEY: ${{ secrets.VITE_SUPABASE_ANON_KEY }}
          
      - name: Install Wrangler
        run: npm install -g wrangler
        
      - name: Deploy to Cloudflare Pages
        run: |
          wrangler pages project create tiko-todo --production-branch=master || echo "Project already exists"
          wrangler pages deploy ./apps/todo/dist --project-name=tiko-todo
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: dc2b7d14a69351375cab6de9a13ddee9

  deploy-type:
    needs: [check-triggers, check-environment]
    if: needs.check-triggers.outputs.build-type == 'true'
    runs-on: ubuntu-latest
    name: Deploy Type App
    steps:
      - uses: actions/checkout@v4
      
      - uses: pnpm/action-setup@v2
        with:
          version: 8
          
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'
          
      - name: Install dependencies
        run: pnpm install --no-frozen-lockfile
        
      - name: Generate i18n translations
        run: pnpm generate:i18n:worker:prod
        
      - name: Build Type app
        run: |
          pnpm --filter=@tiko/ui build
          pnpm --filter=@tiko/core build
          pnpm --filter=type build
        env:
          VITE_SUPABASE_URL: ${{ secrets.VITE_SUPABASE_URL }}
          VITE_SUPABASE_ANON_KEY: ${{ secrets.VITE_SUPABASE_ANON_KEY }}
          
      - name: Install Wrangler
        run: npm install -g wrangler
        
      - name: Deploy to Cloudflare Pages
        run: |
          wrangler pages project create tiko-type --production-branch=master || echo "Project already exists"
          wrangler pages deploy ./apps/type/dist --project-name=tiko-type
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: dc2b7d14a69351375cab6de9a13ddee9

  # Skip tiko app for now as it has build issues
  # deploy-tiko:
  #   needs: check-triggers
  #   if: needs.check-triggers.outputs.build-tiko == 'true'
  #   ...